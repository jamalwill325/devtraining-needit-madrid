<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_58872_needit_needit</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>NeedIt When needed field date</name>
        <order>300</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Add your code here
	
	//store the current time
// 	var currentTimeGDT = new GlideDateTime();
// 	//Create GlideDateTime obj for when needed date
// 	var whenNeededGDT = new GlideDateTime(current.u_when_needed);
	
	//Challenge: Do not allow same-day request
	//Get Date portion of the currentTimeGDT and WhenNeededGTD
// 	var currentDate = currentTimeGDT.getLocalDate();
// 	var whenNeededDate = whenNeededGDT.getLocalDate();
// 	gs.info("Info, Now: " + currentDate + " | Needed: " + whenNeededDate);
// 	gs.warn("Warn, Now: " + currentDate + " | Needed: " + whenNeededDate);
// 	gs.error("Error, Now: " + currentDate + " | Needed: " + whenNeededDate);
// 	gs.debug("Debug, Now: " + currentDate + " | Needed: " + whenNeededDate);
	
// 	//Check if current Date is equal to selected Date in When needed field
// 	if (currentDate.compareTo(whenNeededDate) == 0){
// 		//Show error message from GlideSystem
// 		gs.addErrorMessage("You cannot submit NeedIt request on the same day.");
// 		//GlideRecord Method below that aborts the next database operation for a record. shows error message
// 		current.setAbortAction(true);
// 	}
// 	//Exercise: Prevent pass date request
// 	//If when needed date is before rightnow, do not write the record to the database 
// 	//Output an error message to the screen
// 	 else if (whenNeededGDT.before(currentTimeGDT)){
//  		//Show error message from GlideSystem
//  		gs.addErrorMessage("When needed date cannot be in the past. Your request has not been saved to the databse.");
//  		//GlideRecord Method below that aborts the next database operation for a record. shows error message
//  		current.setAbortAction(true);
//  	}
	
	/*
	//It is good to move the date validation logic out of Business rule and into Utils Script Include because 
	//The data validation logic inthe Script includes can be called by any other server-side script in the NeedIt application. 
	//Is is possible that the date validation logic will be needed to test other date fields.
	//Putting the date validation logic in a Script include allows it to be reused.
	//If multiple applications need access to date validation logic, make the Script Include available to all application scopes
	
	//Instantiate the NeedItUtils class. Call the isDatePast method
	//And pass the u_when_needed value
	*/
	var niUtils = new NeedItUtils();
	//Retrieve the when needed value Date
	var isPast = niUtils.isDatePast(current.u_when_needed);
	// If the isDatePast method returns true, the date is in the past.
	if(isPast == true){
		//Show error message from GlideSystem
		gs.addErrorMessage("When needed date cannot be in the past.  Your request has not been saved to the database.");
		//GlideRecord Method below that aborts the next database operation for a record. shows error message
		current.setAbortAction(true);
	}
	
	//Retrieve the when needed value Date
	var isToday = niUtils.isDateToday(current.u_when_needed);
	// If the isDatePast method returns true, the date is in the past.
	if(isToday == true){
		//Show error message from GlideSystem
		gs.addErrorMessage("You cannot submit NeedIt request on the same day.");
		//GlideRecord Method below that aborts the next database operation for a record. shows error message
		current.setAbortAction(true);
	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-09 14:40:52</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0f4a4abd3711330060b98cf6c3990e7e</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>NeedIt When needed field date</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_0f4a4abd3711330060b98cf6c3990e7e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-05-10 13:37:21</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=0f4a4abd3711330060b98cf6c3990e7e"/>
</record_update>
